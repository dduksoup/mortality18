--========================= AUTOMATE THE MORTALITY ASSUMPTION =========================
--=====================================================================================

USE MORTALITY_STUDY

--=====================================================================================
--=================================== UPDATE SECTION ==================================
-- UPDATE 25/12/2018
-- VERSION 1.1 : CREATE THE NEW MORTALITY DATABASE TO MERGE AND CONFIG ALL DATA  

-- ADDING THE TERM RIDER IN THIS QUERY

--=====================================================================================
--=================================== UPDATE TABLE ====================================
-- PROPHET RESULT: 201712 
-- CLAIM DATA    : 
-- PROPHET TABLE :
-- SPECTIAL CASE :


--=====================================================================================
-- LIST OF TABLES REQUEST BEFORE RUNNING
-- MORT_TABLE
-- PROPHET_TABLE
-- PROPHET_RESULT
-- CLAIM DATA
-- PROPHET_TABLE_FIXED
--======================= CONTROL TO CHOOSE THE PROPHET_RESULT ========================

DECLARE @PRE_DATA NVARCHAR(20)
DECLARE @CUR_DATA NVARCHAR(20)
DECLARE @CLAIM_DATA NVARCHAR(20)


SET @PRE_DATA = '_201612'       ---- !!!!! CHANGE HERE !!!!!         
SET @CUR_DATA = '_201712'       ---- !!!!! CHANGE HERE !!!!!
-- SET @CLAIM_DATA = 'CA_DATABASE_201810'     ---- !!!!! CHANGE HERE !!!!!

-- REMARK: AFTER CHANGE THE CONTROL, PLEASE CLICK TO RUN ALL QUERY TO RECEIVE THE RESULT
--======================================================================================

-- FOR MERGING ALL BOTH DATABASE TOGETHER

EXECUTE('
CREATE VIEW [PROPHET_MERGE] AS

SELECT *,''PRE_RESULT'' AS [RESLT_DATE]
FROM PROPHET_RESULT'+@PRE_DATA+'

UNION ALL


SELECT *,''CUR_RESULT'' AS [RESLT_DATE]
FROM PROPHET_RESULT'+@CUR_DATA+'

GO')


-- CREATE A PROPHET RESULT TABLE THAT MERGE TOGETHER 

--EXECUTE('
--SELECT * INTO [PROPHET_MERGE_ALL'+@PRE_DATA+''+@CUR_DATA+']
--FROM [PROPHET_MERGE]

--GO')

EXECUTE('
SELECT * INTO [PROPHET_MERGE_ALL]
FROM [PROPHET_MERGE]

GO')


-- DROP VIEW
DROP VIEW [PROPHET_MERGE]

GO


--======================= FIXED PROPHET_CODE BEFORE JAN2018 ============================
-- USING: PROPHET_TABLE_FIXED
-- NOTE: This query updates the PROPHET_TABLE table with updated FILENAMES, which switches
-- back some filenames to older versions, due to some inconsistencies between them
-- when trying to map policies between themselves.

CREATE VIEW [PROPHET_TABLE_NEW] AS

SELECT O.[DATA]
	,O.PRODUCT
	,O.[SYSTEM_NAME / PRODUCT_PORT]
	,O.[PACKAGE_CODE]
	,O.[PLAN_COMPONENT]
	,O.[SUB_CHANNEL]
	,O.[MORT_TAB]
	,O.[SUB_PLAN]
	,IIF(X.FILENAME IS NOT NULL
		,X.LAST_FILENAME
		,O.[FILENAME]
		) AS [FILENAME]
	,O.[VALN_INT]
	,O.[CSV_INT]
	,O.[POL_TERM]
	,O.[PRM_TERM]
	,O.[LOAN_INT]
	,O.[LOAN_INT_VAL]
	,O.[ORIG_PACK_CODE]
	,O.[SPCODE]
	,O.[TL_VALINT_ORI]
	,O.[COMMENT]
	,O.[CHANNEL]
	,O.[SUB_CHANNEL NAME]
	,O.[DESCRIPTION]
	,O.[PRODUCT_TYPE]
	,O.[PORT]
	,O.[TYPE]
FROM PROPHET_TABLE AS O 
LEFT JOIN PROPHET_TABLE_FIXED AS X ON (O.FILENAME = X.FILENAME) 

GO



--================================ CLAIM DATA HERE     =================================


--=============================================================================================================================================================================================================
-- CREATE INDICATOR FOR MAPPING IN PROPHET TABLE!!

-- This first query filters out only relevant claim data (deaths) and joins relevant information
-- from MAP_DATA table, such as:
-- MASTER_POLICY, CERNO_POLNO, PLAN_COMPONENT, PACKAGE_CODE, SUB_CHANNEL...
-- data important for later data processing and categorization

CREATE VIEW CLAIM_MORT1 AS

SELECT D.[PORT_TYPE]			AS [M_PORT_TYPE]
      ,D.[MASTER_POLICY]		AS [M_MASTER_POLICY]
      ,D.[CERNO_POLNO]			AS [M_CERNO_POLNO]
      ,D.[PLAN_COMPONENT]		AS [M_PLAN_COMPONENT]
	  ,D.[PLAN_COMPONENT_02]	AS [M_PLAN_COMPONENT_02]
      ,D.[PACKAGE_CODE]			AS [M_PACKAGE_CODE]
      ,D.[SUB_CHANNEL]			AS [M_SUB_CHANNEL]
      ,D.[SUB_OFFICE]			AS [M_SUB_OFFICE]
      ,D.[DEPENDENT_CODE]		AS [M_DEPENDENT_CODE]
	  ,C.*
FROM [CLAIM EXTRACT] AS C 
LEFT JOIN MAP_DATA AS D ON 

-- MAPPING CONDITION (1)
-- In CLAIM_EXTRACT dataset, a policy's certificate/policy number is inserted into
-- a different field depending on its product type.

(CASE 
	WHEN C.PRODUCT_TYPE = 'GM'	THEN C.CERTIFICATE_NO 
	WHEN C.PRODUCT_TYPE = 'GR'	THEN C.GYRT_GR_CER
	 ELSE C.[CONTRACT_NO] 
 END = D.CERNO_POLNO			

-- MAPPING CONDITION (2)
-- MASTER_POLICY information has to match for GM policies.
	AND IIF( C.PRODUCT_TYPE = 'GM' , C.MASTER_POLICY,'') = IIF( C.PRODUCT_TYPE = 'GM' , D.MASTER_POLICY,'')

-- MAPPING CONDITION (3)
-- For GR policies, Claim.PACKAGE_CODE information has to match MapData.PLAN_COMPONENT
-- Else: for GM and GCSxxx, exempt
-- Else: for PA policies, exempt as well

	AND IIF( C.PRODUCT_TYPE = 'GR' ,C.PACKAGE_CODE,IIF( C.PRODUCT_TYPE = 'GM' AND C.MASTER_POLICY LIKE 'GCS%' ,'',IIF(C.PRODUCT_TYPE = 'PA','' ,C.RIDER_CODE)))  
		= IIF( C.PRODUCT_TYPE = 'GM' AND C.MASTER_POLICY LIKE 'GCS%','',IIF(C.PRODUCT_TYPE = 'PA','' ,D.[PLAN_COMPONENT] ) )

-- MAPPING CONDITION (4)
-- If PRODUCT_TYPE is not GR or PA, then Claim and MapData PACKAGE_CODE information have to match.

	AND IIF( C.PRODUCT_TYPE = 'GR' ,'',IIF(C.PRODUCT_TYPE = 'PA','' ,C.PACKAGE_CODE )) 
		= IIF( C.PRODUCT_TYPE = 'GR' ,'',IIF(C.PRODUCT_TYPE = 'PA','' ,D.[PACKAGE_CODE] ))

-- MAPPING CONDITIONS (5)
-- For GR policies:
-- Claim.GYRT_GRP_TYPE must match first two characters of MapData.MASTER_POLICY
-- Claim.GYRT_GRP_POL must match the last 6 characters of MapData.MASTER_POLICY
-- Claim.GYRT_SUB_OFF must match MapData.SUB_OFFICE
-- Claim.GYRT_DEP_COD must match MapData.DEPENDENT_CODE
-- For PA policies:
-- Claim.PRODUCT_TYPE must match MapData.PORT_TYPE

	AND IIF( C.PRODUCT_TYPE = 'GR' ,C.GYRT_GRP_TYPE,'')  = IIF( C.PRODUCT_TYPE = 'GR' ,LEFT(D.MASTER_POLICY,2),'')  
	AND IIF( C.PRODUCT_TYPE = 'GR' ,C.GYRT_GRP_POL,'')  = IIF( C.PRODUCT_TYPE = 'GR' ,RIGHT(D.MASTER_POLICY,6),'')  
	AND IIF( C.PRODUCT_TYPE = 'GR' ,C.GYRT_SUB_OFF,'')  = IIF( C.PRODUCT_TYPE = 'GR' ,D.SUB_OFFICE,'')  
	AND IIF( C.PRODUCT_TYPE = 'GR' ,C.GYRT_DEP_COD,'')  = IIF( C.PRODUCT_TYPE = 'GR' ,D.DEPENDENT_CODE,'')  
	AND IIF( C.PRODUCT_TYPE = 'PA' ,C.PRODUCT_TYPE,'')  = IIF( C.PRODUCT_TYPE = 'PA' ,D.PORT_TYPE,'')  
)

-- Filter Conditions
-- 1. Claim "notice date" must have happened in Buddhist year 2560
-- 2. Claim type must be death of insured
-- 3. Claim status must be paid

WHERE LEFT(CAST(C.NOTICE_DATE AS NUMERIC) ,4) = '2560'
----AND C.PRODUCT_TYPE ='GR'
AND C.CLAIM_TYPE ='DEATH'										-- *********
AND C.CLAIM_STS_DESC = 'PAID'									-- *********

GO



-- In this query, we join further relevant information from PROPHET_TABLE
-- such as FILENAME, SPCODE, and ORIG_PACK_CODE.

CREATE VIEW CLAIM_MORT2 AS

SELECT T.[FILENAME]
	,T.SPCODE
	,T.ORIG_PACK_CODE
	,C.*
FROM CLAIM_MORT1 AS C 
LEFT JOIN [PROPHET_TABLE] AS T ON( 
  -- PLAN
  IIF(C.M_PORT_TYPE = 'PA','PLAN',IIF(C.M_PORT_TYPE = 'GYRT','',C.[M_PLAN_COMPONENT])) = IIF(C.M_PORT_TYPE = 'PA','PLAN',IIF(C.M_PORT_TYPE = 'GYRT','',T.[PLAN_COMPONENT])) 
  
  -- SUB_CHANNEL
  AND IIF(C.M_PORT_TYPE = 'GYRT','',CAST(C.[M_SUB_CHANNEL] AS NVARCHAR)) = IIF(C.M_PORT_TYPE = 'GYRT','',CAST(T.[SUB_CHANNEL] AS NVARCHAR) )
  
  -- PACKAGECODE
  -- AND IIF(C.M_PORT_TYPE = 'PA','PACK',C.[M_PACKAGE_CODE]) = IIF(C.M_PORT_TYPE = 'PA','PACK',T.[PACKAGE_CODE])
  AND IIF(C.M_PORT_TYPE = 'PA','PACK',IIF(C.M_PORT_TYPE = 'GYRT',C.M_MASTER_POLICY,IIF(C.M_PORT_TYPE = 'GMDT','',C.[M_PACKAGE_CODE]))) = IIF(C.M_PORT_TYPE = 'PA','PACK',IIF(C.M_PORT_TYPE = 'GMDT','',T.[PACKAGE_CODE]))

  -- PACKAGECODE FOR GMDT 
  AND (( IIF(C.M_PORT_TYPE = 'GMDT',C.M_MASTER_POLICY,'') = IIF(C.M_PORT_TYPE = 'GMDT',T.[PACKAGE_CODE],'') AND IIF(C.M_PORT_TYPE = 'GMDT',C.[M_PLAN_COMPONENT_02],'') = IIF(C.M_PORT_TYPE = 'GMDT',T.SUB_PLAN,'') )
       OR ( IIF(C.M_PORT_TYPE = 'GMDT',C.[M_PACKAGE_CODE],'') = IIF(C.M_PORT_TYPE = 'GMDT',T.[PACKAGE_CODE],'') AND IIF(C.M_PORT_TYPE = 'GMDT',C.M_MASTER_POLICY,'') = IIF(C.M_PORT_TYPE = 'GMDT',T.SUB_PLAN,'') ) )
  -- PORT_TYPE
  AND IIF(C.M_PORT_TYPE ='PA','PA',IIF(C.M_PORT_TYPE ='YODA','YODA',IIF(C.M_PORT_TYPE ='GRP','GRP_MODEL',''))) = IIF(C.M_PORT_TYPE ='PA',T.DATA,IIF(C.M_PORT_TYPE='YODA',T.DATA,IIF(C.M_PORT_TYPE ='GRP',T.DATA,'')))   )
--WHERE C.PRODUCT_TYPE ='GM'
--ORDER BY C.M_MASTER_POLICY,C.M_CERNO_POLNO

GO




CREATE VIEW CLAIM_MORT3 AS

SELECT CASE WHEN T.LAST_FILENAME IS NOT NULL THEN T.LAST_FILENAME
	        ELSE C.[FILENAME] END AS [FILENAME],C.[ORIG_PACK_CODE]
,C.[SPCODE],C.[M_PORT_TYPE],C.[M_MASTER_POLICY],C.[M_CERNO_POLNO],C.[M_PLAN_COMPONENT],C.[M_PLAN_COMPONENT_02],C.[M_PACKAGE_CODE],C.[M_SUB_CHANNEL],C.[M_SUB_OFFICE]
,C.[M_DEPENDENT_CODE],C.[SYSTEM_NAME],C.[RUNNING],C.[PRODUCT_TYPE],C.[CONTRACT_NO],C.[MASTER_POLICY],C.[CERTIFICATE_NO],C.[GYRT_GRP_TYPE],C.[GYRT_GRP_POL],C.[GYRT_SUB_OFF],C.[GYRT_GR_CER]
,C.[GYRT_DEP_COD],C.[INSURED_ID],C.[OCCUPATION_CODE],C.[CLAIM_YEAR],C.[CLM_NOTICE_NO],C.[ALT_CLAIM_TYPE],C.[ALT_CLAIM_YEAR],C.[ALT_CLAIM_NOTICE]
,C.[ALT_CLAIM_STS],C.[POLICY_STS],C.[CLAIM_STS],C.[CLAIM_STS_DESC],C.[CLAIM_TYPE_CODE],C.[CLAIM_TYPE],C.[PACKAGE_CODE],C.[PACKAGE_DESC],C.[RIDER_CODE]
,C.[RIDER_NAME],C.[DOI_DATE],C.[EFFECTIVE_DATE],C.[FST_ISSUE_DATE],C.[ISSUE_DATE],C.[EXPIRE_DATE],C.[DOC_RCV_DATE],C.[NOTICE_DATE],C.[CLM_APV_DATE],C.[CLM_PAYMENT_DATE]
,C.[CLAIM_INC_DATE],C.[CAUSE_OF_DTH_CODE],C.[DIAGNOSIS],C.[CAUSE_DESC],C.[CAUSE_OF_NUL_CODE],C.[NULLIFY_DESC],C.[IPD_OPD],C.[HOSPITAL]
,C.[ADMISSION_DATE],C.[DISCHARGE_DATE],C.[LEN_OF_STAY],C.[CURR],C.[TOTAL_CLM_AMT],C.[ACTUAL_CLM_AMT],C.[POL_UNPAID_PREMIUM],C.[POL_UNPAID_LOAN],C.[POL_UNPAID_LOAN_INT]
,C.[DEPOSIT_COND_BONUS],C.[PAID_SUM_INSURED],C.[CASH_VALUE],C.[PREMIUM_PAID],C.[CLM_PMT_MTD],C.[CLM_PMT_MTD_DESC],C.[BANK_CODE],C.[ACCOUNT_NO],C.[AGENT_CODE],C.[AGENT_NAME],C.[SVC_AGENT_CODE],C.[SVC_AGENT_NAME],C.[CHANNEL_CODE],C.[SUB_CHANNEL_CODE],C.[OWNER_NATIONAL_ID],C.[OWNER_NAME],C.[PAYEE_NAME],C.[LIFE_NO],C.[LIFE_NAME],C.[DATE_OF_BIRTH],C.[APPROVE_NAME]
,C.[GUSER],C.[GRUNDT],C.[GRUNTM],C.[PPO_FLAG],C.[BNF_CODE],C.[CLAIM_ID],C.[CLAIM_REG_ID],C.[CLAIM_ISS_AGE]
,IIF(C.[CLAIM_GENDER] ='M',0,1) AS [CLAIM_GENDER],C.[SUM_INSURED],C.[HS_BILL_FOR_ICU],C.[BILL_ROOM_BROAD],C.[BILL_PHARMA],C.[BILL_MIS_EXPEND]
,C.[BILL_SURGICAL],C.[BILL_OPERATION_ROOM],C.[BILL_ANAESTHETIC],C.[BILL_MINOR_SURGICAL],C.[BILL_OPD_ACCIDENT],C.[BILL_X_RAYS_LAB]
,C.[BILL_AMBULANCE],C.[BILL_DOCTOR_VISIT],C.[BILL_OTHER],C.[HS_FOR_ICU],C.[ROOM_BROAD],C.[PHARMA],C.[MIS_EXPEND],C.[SURGICAL]
,C.[OPERATION_ROOM],C.[ANAESTHETIC],C.[MINOR_SURGICAL],C.[OPD_ACCIDENT],C.[X_RAYS_LAB],C.[AMBULANCE],C.[DOCTOR_VISIT],C.[OTHER],C.[EXTRACT_USER],C.[EXTRACT_YY],C.[EXTRACT_MM],C.[EXTRACT_DD],C.[EXTRACT_TIME],C.[GROUP_NON_GROUP]
FROM CLAIM_MORT2 AS C LEFT JOIN PROPHET_TABLE_FIXED AS T ON(C.FILENAME = T.FILENAME)

GO


--===================================================================================================================================================================================


--================================ RUN THE RESULT HERE =================================
-- 5902876
------ REVISED THE CODING FOR CALCULATE THE BLOCK OF IF 

CREATE VIEW [PROPHET_MORT] AS

SELECT T.[PRODUCT] AS [PRODUCT_PLAN],IIF( O.[FILENAME] IN('C_ETI_','C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__') ,K.PLAN_COMPONENT,NULL) AS [PLAN_CODE_ETIRPU],T.[CHANNEL],T.[SUB_CHANNEL NAME],T.PORT,
CASE WHEN  O.[FILENAME] = 'C_ETI_' THEN 'BASIC'
	 WHEN  O.[FILENAME] = 'C_ETIL' THEN 'BASIC'
	 WHEN  O.[FILENAME] = 'CTETI_' THEN 'BASIC'
	 WHEN  O.[FILENAME] = 'C_PUP_' THEN 'BASIC'
	 WHEN  O.[FILENAME] = 'C_PUPL' THEN 'BASIC'
	 WHEN  O.[FILENAME] = 'CTPU__' THEN 'BASIC' ELSE T.[TYPE] END AS [TYPE]
,T.[DESCRIPTION],T.[PRODUCT_TYPE], 

----IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'PRE_RESULT', 0 ,IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'CUR_RESULT'  ,M.[Q_X+0],M.[Q_X+0])) AS [Q_X+0],
M.[Q_X+0],

----IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'PRE_RESULT', 0 ,IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'CUR_RESULT'  ,1,0.5)) AS [EXPOSURE_CASE],
0.5 AS [EXPOSURE_CASE],


----IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'PRE_RESULT', 0 ,IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'CUR_RESULT'  ,1*O.DEATH_BEN_PP ,0.5*O.DEATH_BEN_PP )) AS [EXPOSURE_SA],
O.DEATH_BEN_PP /2 AS [EXPOSURE_SA],

----IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'PRE_RESULT', 0 ,IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'CUR_RESULT'  ,1*M.[Q_X+0] ,0.5*M.[Q_X+0] )) AS [EX_CASE],
M.[Q_X+0]*1/2 AS [EX_CASE],

----IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'PRE_RESULT', 0 ,IIF(ENTRY_YEAR <=2016 AND RESLT_DATE = 'CUR_RESULT'  ,1*M.[Q_X+0]*O.DEATH_BEN_PP ,0.5*M.[Q_X+0]*O.DEATH_BEN_PP )) AS [EX_SA],
M.[Q_X+0]*O.DEATH_BEN_PP/2 AS [EX_SA],


O.*
FROM [PROPHET_MERGE_ALL] AS O LEFT JOIN ( SELECT PRODUCT,[FILENAME],[SPCODE],[CHANNEL],[SUB_CHANNEL NAME],[TYPE],[DESCRIPTION],[PRODUCT_TYPE]
      ,[PORT]
      
FROM [PROPHET_TABLE_NEW] 

--WHERE SPCODE IS NOT NULL  


GROUP BY PRODUCT
	,[FILENAME]
	,[SPCODE]
	,[CHANNEL]
	,[SUB_CHANNEL NAME]
	,[TYPE]
	,[DESCRIPTION]
	,[PRODUCT_TYPE]
	,[PORT]
       )	AS T ON
	   ( O.[FILENAME] = T.[FILENAME]
--AND  IIF( T.[FILENAME] ='CTGE__',1,O.SPCODE) = T.SPCODE  ) 
	AND  CASE WHEN T.[FILENAME] ='CTGE__' THEN 1 
		  WHEN  O.[FILENAME] = 'C_ETI_' THEN 1
	      WHEN  O.[FILENAME] = 'C_ETIL' THEN 1
	      WHEN  O.[FILENAME] = 'CTETI_' THEN 1
	      WHEN  O.[FILENAME] = 'C_PUP_' THEN 1
	      WHEN  O.[FILENAME] = 'C_PUPL' THEN 1
	      WHEN  O.[FILENAME] = 'CTPU__' THEN 1 ELSE O.SPCODE END 
		  = 
		CASE  WHEN  T.[FILENAME] = 'C_ETI_' THEN 1
	      WHEN  T.[FILENAME] = 'C_ETIL' THEN 1
	      WHEN  T.[FILENAME] = 'CTETI_' THEN 1
	      WHEN  T.[FILENAME] = 'C_PUP_' THEN 1
	      WHEN  T.[FILENAME] = 'C_PUPL' THEN 1
	      WHEN  T.[FILENAME] = 'CTPU__' THEN 1 ELSE T.SPCODE END 
		  )
LEFT JOIN [MORT_TABLE] AS M ON( O.SEX = M.[SEX_NUM] AND O.AGE_AT_ENTRY+O.POLICY_YEAR = M.[AGE_X]  )  -- ********************
LEFT JOIN (SELECT * FROM MAP_DATA WHERE PORT_TYPE LIKE'TRAD%' AND PLAN_SEQ = 1) AS K ON(O.POL_NUMBER = K.CERNO_POLNO AND O.PACKAGE_CODE = K.PACKAGE_CODE)


GO


-- CHECKING
-- OLD + NEW = 5902876
---- HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!

--====== MAKING CLAIM WITH PROPHET_RESULT ======


CREATE VIEW PROPHET_MORT_2 AS

SELECT C.CLAIM_TYPE
	,IIF(C.CLAIM_TYPE IS NULL,NULL,0.5) AS [EXPOSURE_CASE_CLAIM]
	,0.5*C.ACTUAL_CLM_AMT AS [EXPOSURE_SA_CLAIM]
	,M.[Q_X+0]*0.5 AS [EX_CASE_CLAIM]
	,M.[Q_X+0]*C.ACTUAL_CLM_AMT/2 AS [EX_SA_CLAIM]
	,M.*
	,C.CLAIM_STS_DESC
	,C.CLAIM_TYPE_CODE
	,C.PACKAGE_DESC
	,C.RIDER_CODE
	,C.RIDER_NAME
	,C.DOI_DATE
	,C.EFFECTIVE_DATE
	,C.FST_ISSUE_DATE
	,C.ISSUE_DATE
	,C.EXPIRE_DATE
	,C.DOC_RCV_DATE
	,C.NOTICE_DATE
	,C.CLM_APV_DATE
	,C.CLM_PAYMENT_DATE
	,C.CLAIM_INC_DATE
	,C.CAUSE_OF_DTH_CODE
	,C.DIAGNOSIS
	,C.CAUSE_DESC
	,C.CAUSE_OF_NUL_CODE
	,C.NULLIFY_DESC
	,C.IPD_OPD
	,C.HOSPITAL
	,C.ADMISSION_DATE
	,C.DISCHARGE_DATE
	,C.LEN_OF_STAY
	,C.CURR
	,C.TOTAL_CLM_AMT
	,C.ACTUAL_CLM_AMT
	,C.POL_UNPAID_PREMIUM
	,C.POL_UNPAID_LOAN
	,C.POL_UNPAID_LOAN_INT
	,C.DEPOSIT_COND_BONUS
	,C.PAID_SUM_INSURED
	,C.CASH_VALUE
	,C.PREMIUM_PAID
	,C.CLM_PMT_MTD
	,C.CLM_PMT_MTD_DESC
	,C.BANK_CODE
	,C.ACCOUNT_NO
	,C.AGENT_CODE
	,C.SUM_INSURED AS [SUM_INSURED_CLAIM]
FROM PROPHET_MORT AS M 
LEFT JOIN CLAIM_MORT3 AS C ON 
	(M.RESLT_DATE ='PRE_RESULT' 
		AND 
			IIF(M.[FILENAME] IN ('C_ETI_','C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__')
			,M.PACKAGE_CODE
			,M.[FILENAME]) 
			= 
			IIF( M.[FILENAME] IN('C_ETI_','C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__') 
			,C.M_PACKAGE_CODE
			,C.[FILENAME])
		AND 
			IIF(M.[FILENAME] IN('C_ETI_','C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__') 
			,''
			,M.SPCODE) 
			=  
			IIF(M.[FILENAME] IN('C_ETI_','C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__') 
			,''
			,C.SPCODE)
	AND M.POL_NUMBER = C.M_CERNO_POLNO
	AND 
		IIF(M.PLAN_CODE_ETIRPU IS NOT NULL
		,M.PLAN_CODE_ETIRPU
		,'') 
		=
		IIF(M.PLAN_CODE_ETIRPU IS NOT NULL
		,C.[M_PLAN_COMPONENT]
		,'') 
	AND 
		IIF(C.M_PORT_TYPE ='GYRT'
		,M.PACKAGE_CODE
		,'') 
		= 
		IIF(C.M_PORT_TYPE ='GYRT'
		, C.ORIG_PACK_CODE   /*C.M_MASTER_POLICY*/
		,'')
----AND IIF(C.M_PORT_TYPE ='GYRT',M.DIST,'') = IIF(C.M_PORT_TYPE ='GYRT',C.[M_SUB_CHANNEL],'')

	AND 
		IIF(M.PRODUCT_PLAN ='G' AND C.[PRODUCT_TYPE] ='GM'
		,C.[ORIG_PACK_CODE]
		,'') 
		= 
		IIF(M.PRODUCT_PLAN ='G'  AND C.[PRODUCT_TYPE] ='GM'
		,M.PACKAGE_CODE
		,'')

---- ADD SUB OFFICE FOR GYRT
	AND 
		IIF( C.[PRODUCT_TYPE] ='GR'
		,M.PRODUCT
		,'' ) 
		= 
		IIF( C.[PRODUCT_TYPE] ='GR'
		,CAST(C.M_SUB_OFFICE AS NVARCHAR) + CAST(C.M_DEPENDENT_CODE AS NVARCHAR)
		,'' )

	AND 
		IIF( C.[PRODUCT_TYPE] ='GR'
		,''
		,M.SEX) 
		= 
		IIF( C.[PRODUCT_TYPE] ='GR'
		,''
		,C.CLAIM_GENDER) 
	)


GO



--CREATE VIEW PROPHET_MORT_3 AS

--SELECT *
--FROM PROPHET_MORT_2
--WHERE CLAIM_TYPE IS NOT NULL

--GO


--===================================================================================================================================================================================
--===================================================================================================================================================================================



--=============================================================================================================================================================
--  RESULT



-- RESULT!!!!!!!!!!!


----CREATE VIEW MORTALITY_RESULT AS

----SELECT  RESLT_DATE, [PRODUCT_PLAN],PORT,[TYPE],CASE WHEN  [FILENAME] = 'C_ETI_' THEN 'ETI'
----	 WHEN  [FILENAME] = 'C_ETIL' THEN 'ETI'
----	 WHEN  [FILENAME] = 'CTETI_' THEN 'ETI'
----	 WHEN  [FILENAME] = 'C_PUP_' THEN 'RPU'
----	 WHEN  [FILENAME] = 'C_PUPL' THEN 'RPU'
----	 WHEN  [FILENAME] = 'CTPU__' THEN 'RPU' ELSE PRODUCT_TYPE END AS [PRODUCT_TYPE], COUNT(*) AS [NUM], SUM(EXPOSURE_CASE) AS [EXPOSURE_CASE], SUM(EXPOSURE_SA) AS [EXPOSURE_SA], SUM(EX_CASE) AS [EXPECTED_CASE], SUM(EX_SA) AS [EXPECTED_SA],
----CHANNEL,[SUB_CHANNEL NAME],[DESCRIPTION],ENTRY_YEAR,PREM_FREQ,IIF(SEX = 0,'MALE','FEMALE') AS [SEX],[FILENAME],AGE_AT_ENTRY,POL_TERM_Y,POLICY_YEAR,SUM(ANNUAL_PREM) AS [ANNUAL_PREM]
----,SUM(SUM_ASSURED) AS [SUM_ASSURED],SUM(DEATH_BEN_PP) AS [DEATH_BEN]
----FROM PROPHET_MORT 
----WHERE PRODUCT_TYPE NOT IN('RIDER - ACC','RIDER - HI','RIDER - HS','RIDER - CI','RIDER - RCC','RIDER - TPD','RIDER - WP')
------WHERE    IIF( PRODUCT ='IL' AND [TYPE] ='RIDER' AND (PRODUCT_TYPE !='RIDER - TERM' OR PRODUCT_TYPE != 'RIDER PE'),'0','1' ) = '1'      ----  CUT OL RIDER
----GROUP BY CASE WHEN  [FILENAME] = 'C_ETI_' THEN 'ETI'
----	 WHEN  [FILENAME] = 'C_ETIL' THEN 'ETI'
----	 WHEN  [FILENAME] = 'CTETI_' THEN 'ETI'
----	 WHEN  [FILENAME] = 'C_PUP_' THEN 'RPU'
----	 WHEN  [FILENAME] = 'C_PUPL' THEN 'RPU'
----	 WHEN  [FILENAME] = 'CTPU__' THEN 'RPU' ELSE PRODUCT_TYPE END,RESLT_DATE , [PRODUCT_PLAN],PORT,[TYPE],CHANNEL,[SUB_CHANNEL NAME],[DESCRIPTION],ENTRY_YEAR,PREM_FREQ,SEX,[FILENAME],AGE_AT_ENTRY,POL_TERM_Y,POLICY_YEAR
----	 --,SUM_ASSURED,DEATH_BEN_PP
------ORDER BY RESLT_DATE

----GO



CREATE VIEW _MORTALITY_RESULT AS

SELECT  RESLT_DATE
	, [PRODUCT_PLAN]
	,PORT
	,[TYPE]
	,CASE 
	WHEN  [FILENAME] = 'C_ETI_' THEN 'ETI'
	WHEN  [FILENAME] = 'C_ETIL' THEN 'ETI'
	WHEN  [FILENAME] = 'CTETI_' THEN 'ETI'
	WHEN  [FILENAME] = 'C_PUP_' THEN 'RPU'
	WHEN  [FILENAME] = 'C_PUPL' THEN 'RPU'
	WHEN  [FILENAME] = 'CTPU__' THEN 'RPU' 
	ELSE PRODUCT_TYPE 
	END							AS [PRODUCT_TYPE]
	, COUNT(*) AS [NUM]
	, SUM(EXPOSURE_CASE)		AS [EXPOSURE_CASE]
	, SUM(EXPOSURE_SA)			AS [EXPOSURE_SA]
	, SUM(EX_CASE)				AS [EXPECTED_CASE]
	, SUM(EX_SA)				AS [EXPECTED_SA]
	, CHANNEL
	,[SUB_CHANNEL NAME]
	,[DESCRIPTION]
	,ENTRY_YEAR
	,PREM_FREQ
	,IIF(SEX = 0,'MALE','FEMALE')		AS [SEX]
	,[FILENAME]
	,AGE_AT_ENTRY
	,POL_TERM_Y
	,POLICY_YEAR
	,SUM(ANNUAL_PREM)			AS [ANNUAL_PREM]
	,SUM(SUM_ASSURED)			AS [SUM_ASSURED]
	,SUM(DEATH_BEN_PP)			AS [DEATH_BEN]
	,SUM([EXPOSURE_CASE_CLAIM]) AS [EXPOSURE_CASE_CLAIM]
	,SUM([EXPOSURE_SA_CLAIM])	AS [EXPOSURE_SA_CLAIM]
	,SUM(EX_CASE_CLAIM)			AS [EX_CASE_CLAIM]
	,SUM([EX_SA_CLAIM])			AS [EX_SA_CLAIM]
	,SUM(EXPOSURE_CASE)+SUM([EXPOSURE_CASE_CLAIM])		AS [TOTAL_EXPOSURE_CASE]
	,SUM(EXPOSURE_SA) +SUM([EXPOSURE_SA_CLAIM])			AS [TOTAL_EXPOSURE_SA]
	,SUM(EX_CASE)+SUM(EX_CASE_CLAIM)		AS [TOTAL_EX_CASE]
	,SUM(EX_SA) +SUM([EX_SA_CLAIM])			AS [TOTAL_EX_SA]
FROM PROPHET_MORT_2 
WHERE PRODUCT_TYPE NOT IN('RIDER - ACC','RIDER - HI','RIDER - HS','RIDER - CI','RIDER - RCC','RIDER - TPD','RIDER - WP')
--WHERE    IIF( PRODUCT ='IL' AND [TYPE] ='RIDER' AND (PRODUCT_TYPE !='RIDER - TERM' OR PRODUCT_TYPE != 'RIDER PE'),'0','1' ) = '1'      ----  CUT OL RIDER
GROUP BY CASE 
	WHEN  [FILENAME] = 'C_ETI_' THEN 'ETI'
	WHEN  [FILENAME] = 'C_ETIL' THEN 'ETI'
	WHEN  [FILENAME] = 'CTETI_' THEN 'ETI'
	WHEN  [FILENAME] = 'C_PUP_' THEN 'RPU'
	WHEN  [FILENAME] = 'C_PUPL' THEN 'RPU'
	WHEN  [FILENAME] = 'CTPU__' THEN 'RPU' 
	ELSE PRODUCT_TYPE 
	END
	,RESLT_DATE 
	,[PRODUCT_PLAN]
	,PORT
	,[TYPE]
	,CHANNEL
	,[SUB_CHANNEL NAME]
	,[DESCRIPTION]
	,ENTRY_YEAR
	,PREM_FREQ
	,SEX
	,[FILENAME]
	,AGE_AT_ENTRY
	,POL_TERM_Y
	,POLICY_YEAR
	 --,SUM_ASSURED,DEATH_BEN_PP
--ORDER BY RESLT_DATE

GO


---------------------------------- MAKING TABLE ----------------------------------

SELECT * INTO MORTALITY_RESULT
FROM _MORTALITY_RESULT



























--============================================================== BACK UP OLD RESULT ===========================================================================
--=============================================================================================================================================================

---- RESULT FIRST
----SELECT GROUP_TYPE1,POLICY_YEAR,IIF(SEX = 0,'M','F') AS [GENDER],COUNT(*) AS [POLICY_NO],SUM(EXPOSURE_CASE) AS [SUM_EXPO_C],SUM(EXPOSURE_SA) AS [SUM_EXPO_SA],SUM(EX_CASE) AS [SUM_EX_C],SUM(EX_SA) AS [SUM_EX_SA]
----FROM PROPHET_MORT
----WHERE [TYPE] ='BASIC'
----GROUP BY GROUP_TYPE1,POLICY_YEAR,IIF(SEX = 0,'M','F')
----ORDER BY GROUP_TYPE1,POLICY_YEAR,IIF(SEX = 0,'M','F')



--SELECT CASE WHEN  [FILENAME] = 'C_ETI_' THEN 'ETI'
--	 WHEN  [FILENAME] = 'C_ETIL' THEN 'ETI'
--	 WHEN  [FILENAME] = 'CTETI_' THEN 'ETI'
--	 WHEN  [FILENAME] = 'C_PUP_' THEN 'RPU'
--	 WHEN  [FILENAME] = 'C_PUPL' THEN 'RPU'
--	 WHEN  [FILENAME] = 'CTPU__' THEN 'RPU'
--ELSE  [GROUP_TYPE1] END AS [GROUP_TYPE1],POLICY_YEAR,IIF(SEX = 0,'M','F') AS [GENDER],COUNT(*) AS [POLICY_NO],SUM(EXPOSURE_CASE) AS [SUM_EXPO_C],SUM(EXPOSURE_SA) AS [SUM_EXPO_SA],SUM(EX_CASE) AS [SUM_EX_C],SUM(EX_SA) AS [SUM_EX_SA]
--FROM PROPHET_MORT
--WHERE IIF([TYPE] = 'RIDER' AND GROUP_TYPE1 ='TS','BASIC',[TYPE]) ='BASIC'
--GROUP BY CASE WHEN  [FILENAME] = 'C_ETI_' THEN 'ETI'
--	 WHEN  [FILENAME] = 'C_ETIL' THEN 'ETI'
--	 WHEN  [FILENAME] = 'CTETI_' THEN 'ETI'
--	 WHEN  [FILENAME] = 'C_PUP_' THEN 'RPU'
--	 WHEN  [FILENAME] = 'C_PUPL' THEN 'RPU'
--	 WHEN  [FILENAME] = 'CTPU__' THEN 'RPU' ELSE  [GROUP_TYPE1] END  ,POLICY_YEAR,IIF(SEX = 0,'M','F')




---- FOR ETI&RPU

--SELECT T.[FILENAME],T.GROUP_TYPE1,O.[PLAN_COMPONENT],O.[SUB_CHANNEL],M.*
--FROM PROPHET_MORT AS M LEFT JOIN (SELECT CERNO_POLNO,PLAN_COMPONENT,PACKAGE_CODE,SUB_CHANNEL FROM DATA_ETIRPU ) AS O ON(/*M.PACKAGE_CODE = O.PACKAGE_CODE AND*/ M.POL_NUMBER = O.CERNO_POLNO )
--LEFT JOIN PROPHET_TABLE AS T ON(O.PACKAGE_CODE = T.PACKAGE_CODE AND T.PLAN_COMPONENT = O.PLAN_COMPONENT AND T.SUB_CHANNEL = O.SUB_CHANNEL)
--WHERE M.[FILENAME] IN( 'C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__')
--AND T.GROUP_TYPE1 IS NULL






------------------------------------------------------------------------------------------------------------
------- CHECKING ETI&RPU -----


--SELECT T.[FILENAME],T.GROUP_TYPE1,O.[PLAN_COMPONENT],O.[SUB_CHANNEL],M.*
--FROM PROPHET_MORT AS M LEFT JOIN (SELECT CERNO_POLNO,PLAN_COMPONENT,PACKAGE_CODE,SUB_CHANNEL FROM DATA_ETIRPU ) AS O ON(/*M.PACKAGE_CODE = O.PACKAGE_CODE AND*/ M.POL_NUMBER = O.CERNO_POLNO )
--LEFT JOIN PROPHET_TABLE AS T ON(O.PACKAGE_CODE = T.PACKAGE_CODE AND T.PLAN_COMPONENT = O.PLAN_COMPONENT AND T.SUB_CHANNEL = O.SUB_CHANNEL)
--WHERE M.[FILENAME] IN( 'C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__')
----AND T.GROUP_TYPE1 IS NULL
--AND T.GROUP_TYPE1 ='WL'





--SELECT T.[FILENAME],T.GROUP_TYPE1,O.[PLAN_COMPONENT],O.[SUB_CHANNEL],M.*
--FROM PROPHET_MORT AS M LEFT JOIN (SELECT CERNO_POLNO,PLAN_COMPONENT,PACKAGE_CODE,SUB_CHANNEL FROM DATA_ETIRPU ) AS O ON(/*M.PACKAGE_CODE = O.PACKAGE_CODE AND*/ M.POL_NUMBER = O.CERNO_POLNO )
--LEFT JOIN PROPHET_TABLE AS T ON(O.PACKAGE_CODE = T.PACKAGE_CODE AND T.PLAN_COMPONENT = O.PLAN_COMPONENT AND T.SUB_CHANNEL = O.SUB_CHANNEL)
--WHERE M.[FILENAME] NOT IN( 'C_ETIL','CTETI_','C_PUP_','C_PUPL','CTPU__')
----AND T.GROUP_TYPE1 IS NULL
--AND T.GROUP_TYPE1 ='WL'
--AND O.PLAN_COMPONENT = 'WAT004'




----SELECT FILENAME,COUNT(*) AS [NUM]
----FROM  PROPHET_MORT
----GROUP BY FILENAME



----SELECT FILENAME,RESLT_DATE,SUM(EXPOSURE_CASE) AS [SUM_EXPO_C]
----FROM PROPHET_MORT
----WHERE [TYPE] ='BASIC'
----GROUP BY FILENAME,RESLT_DATE



---- MAKE THE UL AND ETI&RPU

----SELECT O.*
----FROM PROPHET_MORT AS O LEFT JOIN (SELECT * 
----FROM ACT_DATA_201809..TMP_ATF020PF 
----WHERE CUR_POL_STS IN('10','11','12','13')) AS D ON(O.POL_NUMBER = D.CERNO_POLNO AND O.PACKAGE_CODE = D.PACKAGE_CODE )
----WHERE O.[FILENAME] IN('C_ETI_'
----,'C_ETIL'
----,'C_PUP_'
----,'C_PUPL'
----,'CTETI_'
----,'CTPU__')



-----RENAME PROPHET_MERGE_ALL_201612_201712
